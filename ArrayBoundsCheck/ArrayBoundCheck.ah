/* 
 * This file is part of the library of dependability aspects.
 * See: http://dx.doi.org/10.17877/DE290R-17995
 * Copyright (c) 2017 Christoph Borchert.
 * 
 * This program is free software: you can redistribute it and/or modify  
 * it under the terms of the GNU General Public License as published by  
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef ARRAY_BOUNDS_CHECK_AH_
#define ARRAY_BOUNDS_CHECK_AH_

template<unsigned int DIMS> // primary template
struct ArrayBounds {
  enum { DIM = DIMS-1 }; // current dimension
  template<typename JP>
  static bool out_of_bounds(JP *tjp) {
    if (tjp->template idx<DIM>() >= JP::template Dim<DIM>::Size)
      return true; // runtime index exceeds compile-time bound
    else if (tjp->template idx<DIM>() < 0)
      return true; // negative index
    else return ArrayBounds<DIM>::out_of_bounds(tjp); // recurse
  }
};
template<> // template specialization ...
struct ArrayBounds<0> { // ... for no more dimensions (zero)
  template<typename JP>
  static bool out_of_bounds(JP *tjp) { return false; }
};

aspect ArrayBoundsCheck {
protected:
  pointcut virtual where() = 0; // must be defined by derived aspects
  pointcut on_error() = execution("void ArrayBoundsCheck::error()");

private:
  inline void error() {} // explicit join point, exposed via on_error()

  advice ref(where()) : before() { // prohibit aliasing
    static_assert(JoinPoint::DIMS == 0, "aliasing of array");
  }

  advice get(where()) || set(where()) : before() {
    if (ArrayBounds<JoinPoint::DIMS>::out_of_bounds(tjp))
      error();
    tjp->idx<0>(); // workaround for AspectC++ bug #516
  }
};

#endif /* ARRAY_BOUNDS_CHECK_AH_ */

